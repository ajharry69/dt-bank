name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main" ]

env:
  GITHUB_ACTOR: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
  TF_WORKING_DIR: "ops/terraform"

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Gradle
        uses: ./.github/actions/setup-gradle

      - name: Build
        run: make build

      - name: Run tests
        run: make test

      - name: Upload Test and Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: test-and-coverage-reports
          path: |
            build/reports/jacoco/
          retention-days: 5

  terraform:
    needs: build-and-test
    runs-on: ubuntu-24.04
    permissions:
      contents: "read"
      pull-requests: "write" # Required to comment on PRs
      id-token: "write"      # Required for OIDC authentication to GCP

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            })
            
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  build-and-push-current:
    name: Build and Push Docker Images (${{ matrix.version }})
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        version:
          - current
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Gradle and Docker
        uses: ./.github/actions/setup-gradle-and-docker

      - name: Build and push ${{ matrix.version }} Docker images
        env:
          IMAGE_VERSION: ${{ matrix.version }}
        run: make build-and-push-images

  release:
    name: Create Release and Push Docker Images
    if: "startsWith(github.ref, 'refs/tags/')"
    needs:
      - build-and-test
      - terraform
    runs-on: ubuntu-24.04
    permissions:
      contents: "read"
      id-token: "write" # Required for OIDC authentication to GCP
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup Gradle and Docker
        uses: ./.github/actions/setup-gradle-and-docker

      - name: Build and push Docker images
        run: make build-and-push-images

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Get GKE cluster credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: "dt-bank-cluster"
          location: "africa-south1"

      - name: Deploy to GKE using Kustomize
        run: kubectl apply -k ./ops/k8s/overlays/production
