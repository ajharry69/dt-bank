services:
  keycloak-database: &db
    extends:
      file: compose.ide.yaml
      service: keycloak-database

  keycloak:
    depends_on: &fb-depends-on
      fluent-bit:
        condition: service_started
    logging: &fb-logging
      driver: fluentd
      options:
        fluentd-address: 127.0.0.1:24224
    extends:
      file: compose.ide.yaml
      service: keycloak
    environment:
      KC_HOSTNAME: https://host.docker.internal:8443
      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/server.crt.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/server.key.pem

  rabbitmq:
    depends_on: *fb-depends-on
    logging: *fb-logging
    extends:
      file: compose.ide.yaml
      service: rabbitmq
    volumes:
      - mq_data:/var/lib/rabbitmq

  zipkin:
    extends:
      file: compose.ide.yaml
      service: zipkin

  redis:
    depends_on: *fb-depends-on
    logging: *fb-logging
    extends:
      file: compose.ide.yaml
      service: redis

  fluent-bit:
    image: grafana/fluent-bit-plugin-loki:3.5
    ports:
      - "24224:24224"
    environment:
      LOKI_URL: http://loki:3100/loki/api/v1/push
    volumes:
      - ./ops/observability/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf

  loki:
    image: grafana/loki:3.5
    depends_on: *fb-depends-on
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --output-document=- http://localhost:3100/ready | grep -q -w ready || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 10
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./ops/observability/loki/local-config.yaml:/etc/loki/local-config.yaml

  grafana:
    image: grafana/grafana:12.0.1
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 10
    ports:
      - "3000:3000"
    volumes:
      - ./ops/observability/grafana/provisioning/datasources/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./ops/observability/grafana/provisioning/dashboards/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./ops/observability/grafana/dashboards:/etc/grafana/dashboards
      - ./ops/observability/grafana/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - loki

  prometheus:
    image: prom/prometheus:v3.4.1
    restart: on-failure
    # https://prometheus.io/docs/prometheus/latest/storage/#remote-storage-integrations
    command:
      # See feature flags: https://prometheus.io/docs/prometheus/latest/feature_flags/
      - --enable-feature=exemplar-storage
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9090/-/healthy || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 10
    volumes:
      - ./ops/observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  tempo:
    image: grafana/tempo:2.8.0-rc.1
    command: [ "-config.file=/etc/tempo.yml" ]
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3200/api/echo || exit 1" ]
      interval: 5s
      timeout: 1s
      retries: 10
    ports:
      - "3200:3200"   # tempo
      - "4318:4318"   # otlp http
      - "4317:4317"   # otlp grpc
    volumes:
      - ./ops/observability/tempo/tempo.yml:/etc/tempo.yml:ro

  account-service-database: *db

  card-service-database: *db

  customer-service-database: *db

  config-server:
    image: ghcr.io/ajharry69/config-server:current
    logging: *fb-logging
    depends_on:
      rabbitmq:
        condition: service_started
    healthcheck: &spring-healthcheck
      test: [ "CMD-SHELL", "curl -s http://localhost:8080/actuator/health | grep -q -w status || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      SERVER_PORT: "8080"

  discovery-service:
    image: ghcr.io/ajharry69/discovery-service:current
    logging: *fb-logging
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck: *spring-healthcheck
    environment: &application-environment
      SPRING_PROFILES_ACTIVE: "compose"
      CONFIG_SERVER_URL: "http://config-server:8080"

  account-service:
    image: ghcr.io/ajharry69/account-service:current
    logging: *fb-logging
    depends_on:
      discovery-service: &discovery-service-depends-on
        condition: service_healthy
      account-service-database:
        condition: service_healthy
    healthcheck: *spring-healthcheck
    environment: *application-environment

  card-service:
    image: ghcr.io/ajharry69/card-service:current
    logging: *fb-logging
    depends_on:
      discovery-service: *discovery-service-depends-on
      card-service-database:
        condition: service_healthy
    healthcheck: *spring-healthcheck
    environment: *application-environment

  customer-service:
    image: ghcr.io/ajharry69/customer-service:current
    logging: *fb-logging
    depends_on:
      discovery-service: *discovery-service-depends-on
      customer-service-database:
        condition: service_healthy
    healthcheck: *spring-healthcheck
    environment: *application-environment

  gateway:
    image: ghcr.io/ajharry69/gateway:current
    logging: *fb-logging
    depends_on:
      account-service:
        condition: service_healthy
      card-service:
        condition: service_healthy
      customer-service:
        condition: service_healthy
    environment: *application-environment
    ports:
      - "8080:8080"

volumes:
  mq_data: